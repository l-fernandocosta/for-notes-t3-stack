generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Topic         Topic[]
}

model Topic {
    id         String   @id @default(cuid())
    title      String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String
    notes  Note[]

    @@index([userId, id])
}

model Note {
    id      String @id @default(cuid())
    title   String
    content String @db.Text

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    Topic   Topic  @relation(fields: [topicId], references: [id])
    topicId String

    @@map("notes")
}
